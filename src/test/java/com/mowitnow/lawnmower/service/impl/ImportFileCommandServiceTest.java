package com.mowitnow.lawnmower.service.impl;

import static org.junit.Assert.assertEquals;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.apache.commons.io.FileUtils;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.mowitnow.lawnmower.exception.WrongInputFormatException;
import com.mowitnow.lawnmower.model.Direction;
import com.mowitnow.lawnmower.model.Position;
import com.mowitnow.lawnmower.model.Vehicle;

/**
 * Test the import of files.
 * 
 * @author stemmer
 * 
 */
public class ImportFileCommandServiceTest {

    private String autogeneratedprefix = null;

    /**
     * Method executed before each tests.
     * 
     * @throws IOException
     *             on IO error.
     */
    @Before
    public void setUp() throws IOException {
        autogeneratedprefix =
                "ImportFileCommandServiceTest_"
                        + new StringBuilder(
                                new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss_SS").format(new Date()))
                                .toString();

        for (String file : new String[] {"command_incomplete.txt", "command_unix.txt",
                "command_win.txt", "command_wrongcommand.txt"}) {
            FileUtils.copyInputStreamToFile(this
                    .getClass()
                    .getClassLoader()
                    .getResourceAsStream(file),
                    new File(FileUtils.getTempDirectory() + File.separator + autogeneratedprefix
                            + file));
        }
    }

    /**
     * Test the import of a windows file.
     * 
     * @throws Exception
     *             on any error.
     */
    @Test
    public void testWindowsCorrectFile() throws Exception {
        List<Vehicle> vehicles =
                new ImportFileCommandServiceImpl(new CommandExecutorImpl()).execute(FileUtils
                        .getTempDirectory()
                        + File.separator
                        + autogeneratedprefix
                        + "command_win.txt");

        assertEquals(2, vehicles.size());
        assertEquals(new Vehicle(new Position(1, 3), Direction.N), vehicles.get(0));
        assertEquals(new Vehicle(new Position(5, 1), Direction.E), vehicles.get(1));
    }

    /**
     * Test the import of a unix file.
     * 
     * @throws Exception
     *             on any error.
     */
    @Test
    public void testUnixCorrectFile() throws Exception {
        List<Vehicle> vehicles =
                new ImportFileCommandServiceImpl(new CommandExecutorImpl()).execute(FileUtils
                        .getTempDirectory()
                        + File.separator
                        + autogeneratedprefix
                        + "command_unix.txt");

        assertEquals(2, vehicles.size());
        assertEquals(new Vehicle(new Position(1, 3), Direction.N), vehicles.get(0));
        assertEquals(new Vehicle(new Position(5, 1), Direction.E), vehicles.get(1));
    }

    /**
     * Test with file does not exist.
     * 
     * @throws Exception
     *             on any error.
     */
    @Test(expected = FileNotFoundException.class)
    public void testFileDoesNotExist() throws Exception {
        new ImportFileCommandServiceImpl(new CommandExecutorImpl()).execute("doesnotexistatall");
    }

    /**
     * Test incomplete file.
     * 
     * @throws Exception
     *             on any error.
     */
    @Test(expected = WrongInputFormatException.class)
    public void testMalformedFileOne() throws Exception {
        new ImportFileCommandServiceImpl(new CommandExecutorImpl()).execute(FileUtils
                .getTempDirectory()
                + File.separator
                + autogeneratedprefix
                + "command_incomplete.txt");
    }

    /**
     * Test wroing command.
     * 
     * @throws Exception
     *             on any error.
     */
    @Test(expected = WrongInputFormatException.class)
    public void testMalformedFileTwo() throws Exception {
        new ImportFileCommandServiceImpl(new CommandExecutorImpl()).execute(FileUtils
                .getTempDirectory()
                + File.separator
                + autogeneratedprefix
                + "command_incomplete.txt");
    }

    /**
     * Method executed after each tests.
     * 
     * @throws IOException
     *             on IO error.
     */
    @After
    public void tearDown() throws IOException {
        for (String file : new String[] {"command_incomplete.txt", "command_unix.txt",
                "command_win.txt", "command_wrongcommand.txt"}) {
            FileUtils.deleteQuietly(new File(FileUtils.getTempDirectory() + File.separator
                    + autogeneratedprefix + file));
        }
    }
}
